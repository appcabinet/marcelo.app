---
interface Props {
  translateY: number;
}

const { translateY } = Astro.props;
const translateYValue = translateY ? `translateY(${translateY}px)` : 'translateY(-50%)';

---
<style>
  .aside-reference-container {
    position: absolute;
    height: 0;
    width: 0;
    overflow: visible; /* Allows the aside to be visible despite parent dimensions */
  }

  .aside-container {
    position: absolute;
    right: calc(-1.03 * var(--article-container-width));
    width: 240px;
    transform: var({translateYValue}); /* Adjust vertical position to align with the reference point */
  }

  .aside-line {
    height: 1.5px;
    background-color: var(--accent);
    margin-bottom: 0.5rem;
    opacity: 0.65;
  }

  .aside-content {
    font-size: 0.95rem;
    color: rgb(var(--text));
  }

  /* Ensure nested markdown elements have proper spacing */
  .aside-content :global(p) {
    font-size: 1rem;
    letter-spacing: -0.01em;
    line-height: 1.2;
    margin: 0.5rem 0;
    text-align: left;
    color: var(--text-light);
  }

  .aside-content :global(p:first-child) {
    margin-top: 0;
  }

  .aside-content :global(p:last-child) {
    margin-bottom: 0;
  }

</style>

<div class="aside-reference-container">
  <div class="aside-container">
    <div class="aside-line"></div>
    <div class="aside-content">
      <slot />
    </div>
  </div>
</div>
