<canvas id="canvas3D" class="geometric-shape"></canvas>

<style>
  .geometric-shape {
    width: 100%;
    height: 100%;
    display: block;
  }
</style>

<script>
class GeometricShape {
  constructor(canvasId) {
    this.canvas = document.getElementById(canvasId);
    this.ctx = this.canvas.getContext('2d');
    
    // Get the container size
    const container = this.canvas.parentElement;
    const containerSize = Math.min(container.offsetWidth, container.offsetHeight);
    
    // Set canvas size to match container's smallest dimension
    this.width = containerSize;
    this.height = containerSize;
    // Double the canvas size for higher resolution
    this.canvas.width = this.width * 2;
    this.canvas.height = this.height * 2;
    this.ctx.scale(2, 2); // Scale up the context
    
    this.centerX = this.width / 2;
    this.centerY = this.height / 2;
    // Make the shape larger by increasing the size multiplier (was 0.25)
    this.size = this.width * 0.45;
    
    this.backgroundColor = '#F5F5F5';
    this.primaryColor = '#292929';
    this.secondaryColor = '#2e2e2e';
    this.textLight = 'rgba(41, 41, 41, 0.65)';
    
    this.rotationX = 0;
    this.rotationY = 0;
    this.rotationZ = 0;
    
    this.autoRotateX = 0.005;
    this.autoRotateY = 0.007;
    this.autoRotateZ = 0.003;
    
    this.mouseX = 0;
    this.mouseY = 0;
    this.isMouseDown = false;
    this.lastMouseX = 0;
    this.lastMouseY = 0;
    
    // Adjust vertices to maintain diamond shape
    const vertexScale = 1.2; // Increase the overall scale
    this.vertices = [
      [0, -1.2 * vertexScale, 0],          // Top vertex (made taller)
      [1 * vertexScale, 0, 1 * vertexScale],    // Middle vertices (made wider)
      [1 * vertexScale, 0, -1 * vertexScale],
      [-1 * vertexScale, 0, -1 * vertexScale],
      [-1 * vertexScale, 0, 1 * vertexScale],
      [0, 1.2 * vertexScale, 0]           // Bottom vertex (made taller)
    ];
    
    this.faces = [
      [0, 1, 2],
      [0, 2, 3],
      [0, 3, 4],
      [0, 4, 1],
      [5, 1, 4],
      [5, 4, 3],
      [5, 3, 2],
      [5, 2, 1]
    ];
    
    this.edges = [
      [0, 1], [0, 2], [0, 3], [0, 4],
      [1, 2], [2, 3], [3, 4], [4, 1],
      [5, 1], [5, 2], [5, 3], [5, 4],
      [0, 5]
    ];
    
    this.internalLines = [
      [1, 3],
      [2, 4]
    ];
    
    this.initEventListeners();
    this.animate();
  }
  
  initEventListeners() {
    window.addEventListener('mousemove', (e) => {
      const rect = this.canvas.getBoundingClientRect();
      this.mouseX = e.clientX - rect.left;
      this.mouseY = e.clientY - rect.top;
      
      if (this.isMouseDown) {
        const deltaX = this.mouseX - this.lastMouseX;
        const deltaY = this.mouseY - this.lastMouseY;
        
        this.rotationY += deltaX * 0.01;
        this.rotationX += deltaY * 0.01;
      }
      
      this.lastMouseX = this.mouseX;
      this.lastMouseY = this.mouseY;
    });
    
    window.addEventListener('mousedown', () => {
      this.isMouseDown = true;
    });
    
    window.addEventListener('mouseup', () => {
      this.isMouseDown = false;
    });
    
    window.addEventListener('resize', () => {
      // Get the container size
      const container = this.canvas.parentElement;
      const containerSize = Math.min(container.offsetWidth, container.offsetHeight);
      
      // Update canvas size to match container's smallest dimension
      this.width = containerSize;
      this.height = containerSize;
      this.canvas.width = this.width * 2;
      this.canvas.height = this.height * 2;
      this.ctx.scale(2, 2); // Scale up the context
      
      this.centerX = this.width / 2;
      this.centerY = this.height / 2;
      this.size = this.width * 0.45;
    });
  }
  
  project(point3D) {
    const rotatedX = this.rotateX(point3D);
    const rotatedXY = this.rotateY(rotatedX);
    const rotatedXYZ = this.rotateZ(rotatedXY);
    
    const z = 5;
    const distance = z / (z + rotatedXYZ[2] + 4);
    
    const x2d = rotatedXYZ[0] * distance * this.size + this.centerX;
    const y2d = rotatedXYZ[1] * distance * this.size + this.centerY;
    
    return [x2d, y2d, distance];
  }
  
  rotateX(point) {
    const [x, y, z] = point;
    const cos = Math.cos(this.rotationX);
    const sin = Math.sin(this.rotationX);
    const newY = y * cos - z * sin;
    const newZ = y * sin + z * cos;
    return [x, newY, newZ];
  }
  
  rotateY(point) {
    const [x, y, z] = point;
    const cos = Math.cos(this.rotationY);
    const sin = Math.sin(this.rotationY);
    const newX = x * cos - z * sin;
    const newZ = x * sin + z * cos;
    return [newX, y, newZ];
  }
  
  rotateZ(point) {
    const [x, y, z] = point;
    const cos = Math.cos(this.rotationZ);
    const sin = Math.sin(this.rotationZ);
    const newX = x * cos - y * sin;
    const newY = x * sin + y * cos;
    return [newX, newY, z];
  }
  
  draw() {
    this.ctx.fillStyle = this.backgroundColor;
    this.ctx.fillRect(0, 0, this.width, this.height);
    
    const projectedVertices = this.vertices.map(v => this.project(v));
    
    this.faces.forEach((face, index) => {
      const [a, b, c] = face;
      const [xa, ya, da] = projectedVertices[a];
      const [xb, yb, db] = projectedVertices[b];
      const [xc, yc, dc] = projectedVertices[c];
      
      const v1x = xb - xa;
      const v1y = yb - ya;
      const v2x = xc - xa;
      const v2y = yc - ya;
      const z = v1x * v2y - v1y * v2x;
      
      if (z < 0) {
        this.ctx.beginPath();
        this.ctx.moveTo(xa, ya);
        this.ctx.lineTo(xb, yb);
        this.ctx.lineTo(xc, yc);
        this.ctx.closePath();
        
        const gradient = this.ctx.createLinearGradient(xa, ya, xc, yc);
        const alpha = 0.1 + (index % 4) * 0.05; // Reduced opacity
        gradient.addColorStop(0, `rgba(41, 41, 41, ${alpha})`);
        gradient.addColorStop(1, `rgba(46, 46, 46, ${alpha * 0.8})`);
        
        this.ctx.fillStyle = gradient;
        this.ctx.fill();
      }
    });
    
    // Draw edges with slightly thinner lines
    this.ctx.strokeStyle = this.textLight;
    this.ctx.lineWidth = 1.5;
    this.edges.forEach(edge => {
      const [a, b] = edge;
      const [xa, ya] = projectedVertices[a];
      const [xb, yb] = projectedVertices[b];
      
      this.ctx.beginPath();
      this.ctx.moveTo(xa, ya);
      this.ctx.lineTo(xb, yb);
      this.ctx.stroke();
    });
    
    // Draw internal lines with same thickness
    this.ctx.strokeStyle = this.textLight;
    this.ctx.lineWidth = 1.5;
    this.internalLines.forEach(line => {
      const [a, b] = line;
      const [xa, ya] = projectedVertices[a];
      const [xb, yb] = projectedVertices[b];
      
      this.ctx.beginPath();
      this.ctx.moveTo(xa, ya);
      this.ctx.lineTo(xb, yb);
      this.ctx.stroke();
    });
    
    // Draw smaller vertices with matching color
    this.ctx.fillStyle = this.textLight;
    projectedVertices.forEach(([x, y, d]) => {
      this.ctx.beginPath();
      this.ctx.arc(x, y, 1.5 * d, 0, Math.PI * 2); // Reduced size from 3 to 1.5
      this.ctx.fill();
    });
  }
  
  animate() {
    if (!this.isMouseDown) {
      this.rotationX += this.autoRotateX;
      this.rotationY += this.autoRotateY;
      this.rotationZ += this.autoRotateZ;
    }
    
    this.draw();
    requestAnimationFrame(() => this.animate());
  }
}

window.addEventListener('load', () => {
  new GeometricShape('canvas3D');
});
</script> 